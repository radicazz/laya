name: Linux Builds

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

jobs:
  build-linux:
    name: ${{ matrix.compiler }}-${{ matrix.build_type }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
        include:
          - compiler: gcc
            cc: gcc-11
            cxx: g++-11
          - compiler: clang
            cc: clang-15
            cxx: clang++-15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Cache SDL3 build
      uses: actions/cache@v4
      with:
        path: |
          build/external
          external/SDL/build
          external/SDL_image/build
          external/SDL_ttf/build
        key: ${{ runner.os }}-${{ matrix.compiler }}-sdl3-${{ hashFiles('external/SDL/**', 'external/SDL_image/**', 'external/SDL_ttf/**') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler }}-sdl3-

    - name: Install Ubuntu dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          libasound2-dev \
          libpulse-dev \
          libaudio-dev \
          libjack-dev \
          libsndio-dev \
          libsamplerate0-dev \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxfixes-dev \
          libxi-dev \
          libxss-dev \
          libwayland-dev \
          libxkbcommon-dev \
          libdrm-dev \
          libxkbcommon-dev \
          libgl1-mesa-dev \
          libgles2-mesa-dev \
          libegl1-mesa-dev \
          libdbus-1-dev \
          libibus-1.0-dev \
          libudev-dev \
          fcitx-libs-dev \
          libfreetype6-dev \
          libharfbuzz-dev \
          libpng-dev \
          libjpeg-dev \
          libtiff-dev \
          zlib1g-dev \
          xvfb

    - name: Setup headless display
      run: |
        # Start virtual display for headless testing
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Install Ubuntu GCC 11
      if: matrix.compiler == 'gcc'
      run: |
        sudo apt-get install -y gcc-11 g++-11

    - name: Install Ubuntu Clang 15
      if: matrix.compiler == 'clang'
      run: |
        sudo apt-get install -y clang-15 clang++-15 libc++-15-dev libc++abi-15-dev

    - name: Set up environment variables
      run: |
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

    - name: Configure CMake
      run: |
        cmake_args=(
          -B build
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DLAYA_BUILD_TESTS=ON
          -DLAYA_BUILD_EXAMPLES=ON
          -DLAYA_SDL_METHOD=submodule
          -DLAYA_BUILD_SHARED=ON
          -DCMAKE_CXX_STANDARD=20
          -DCMAKE_CXX_STANDARD_REQUIRED=ON
          -G "Ninja"
        )

        # Add coverage for Debug builds with GCC
        if [[ "${{ matrix.build_type }}" == "Debug" && "${{ matrix.compiler }}" == "gcc" ]]; then
          cmake_args+=(-DCMAKE_CXX_FLAGS="--coverage -g -O0")
        fi

        # Use libc++ for Clang to avoid libstdc++ C++20 chrono issues
        if [[ "${{ matrix.compiler }}" == "clang" ]]; then
          cmake_args+=(-DCMAKE_CXX_FLAGS="-stdlib=libc++")
          cmake_args+=(-DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++ -lc++abi")
        fi

        cmake "${cmake_args[@]}"

    - name: Build
      run: |
        cmake --build build --parallel

    - name: Test
      working-directory: build
      run: |
        ctest --output-on-failure --parallel

    - name: Run examples
      working-directory: build
      run: |
        # Test that examples can be executed (they should exit quickly)
        timeout 10s ./examples/hello_laya || true

    - name: Run benchmarks
      if: matrix.build_type == 'Release'
      working-directory: build
      run: |
        # Create benchmark results directory
        mkdir -p ../benchmark-results

        # Run performance tests and capture output
        ./tests/laya_benchmarks --test-suite=performance --reporters=json --out=../benchmark-results/benchmarks-${{ matrix.compiler }}.json || true
        ./tests/laya_benchmarks --test-suite=performance --reporters=console > ../benchmark-results/benchmarks-${{ matrix.compiler }}.txt || true

    - name: Generate coverage report
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc'
      run: |
        sudo apt-get install -y lcov
        # Use the same GCC version for gcov as used for building
        lcov --gcov-tool gcov-11 --capture --directory build --output-file coverage.info
        lcov --gcov-tool gcov-11 --remove coverage.info '/usr/*' '*/external/*' '*/tests/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: laya-linux-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          build/src/
          build/examples/
          !build/**/*.o
        retention-days: 30

    - name: Upload benchmark results
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-linux-${{ matrix.compiler }}
        path: |
          benchmark-results/
        retention-days: 30
