name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  # Ubuntu builds (run on all branches)
  build-ubuntu:
    name: ${{ matrix.compiler }}-${{ matrix.build_type }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
        include:
          - compiler: gcc
            cc: gcc-11
            cxx: g++-11
          - compiler: clang
            cc: clang-14
            cxx: clang++-14

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Cache SDL3 build
      uses: actions/cache@v4
      with:
        path: |
          build/external
          external/SDL/build
          external/SDL_image/build
          external/SDL_ttf/build
        key: ${{ runner.os }}-${{ matrix.compiler }}-sdl3-${{ hashFiles('external/SDL/**', 'external/SDL_image/**', 'external/SDL_ttf/**') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler }}-sdl3-

    - name: Install Ubuntu dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          libasound2-dev \
          libpulse-dev \
          libaudio-dev \
          libjack-dev \
          libsndio-dev \
          libsamplerate0-dev \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxfixes-dev \
          libxi-dev \
          libxss-dev \
          libwayland-dev \
          libxkbcommon-dev \
          libdrm-dev \
          libxkbcommon-dev \
          libgl1-mesa-dev \
          libgles2-mesa-dev \
          libegl1-mesa-dev \
          libdbus-1-dev \
          libibus-1.0-dev \
          libudev-dev \
          fcitx-libs-dev \
          libfreetype6-dev \
          libharfbuzz-dev \
          libpng-dev \
          libjpeg-dev \
          libtiff-dev \
          zlib1g-dev \
          xvfb

    - name: Setup headless display
      run: |
        # Start virtual display for headless testing
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Install Ubuntu GCC 11
      if: matrix.compiler == 'gcc'
      run: |
        sudo apt-get install -y gcc-11 g++-11

    - name: Install Ubuntu Clang 14
      if: matrix.compiler == 'clang'
      run: |
        sudo apt-get install -y clang-14 clang++-14

    - name: Set up environment variables
      run: |
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

    - name: Configure CMake
      run: |
        cmake_args=(
          -B build
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DLAYA_BUILD_TESTS=ON
          -DLAYA_BUILD_EXAMPLES=ON
          -DLAYA_SDL_METHOD=submodule
          -DLAYA_BUILD_SHARED=ON
          -G "Ninja"
        )

        # Add coverage for Debug builds with GCC
        if [[ "${{ matrix.build_type }}" == "Debug" && "${{ matrix.compiler }}" == "gcc" ]]; then
          cmake_args+=(-DCMAKE_CXX_FLAGS="--coverage -g -O0")
        fi

        cmake "${cmake_args[@]}"

    - name: Build
      run: |
        cmake --build build --parallel

    - name: Test
      working-directory: build
      run: |
        ctest --output-on-failure --parallel

    - name: Run examples
      working-directory: build
      run: |
        # Test that examples can be executed (they should exit quickly)
        timeout 10s ./examples/hello_laya || true

    - name: Generate coverage report
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc'
      run: |
        sudo apt-get install -y lcov
        lcov --capture --directory build --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/external/*' '*/tests/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload build artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: laya-ubuntu-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          build/src/
          build/examples/
          !build/**/*.o
        retention-days: 7

  # Windows build (only run on master branch)
  build-windows:
    name: windows-msvc-${{ matrix.build_type }}
    runs-on: windows-latest
    if: github.ref == 'refs/heads/master'

    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Cache SDL3 build
      uses: actions/cache@v4
      with:
        path: |
          build/external
          external/SDL/build
          external/SDL_image/build
          external/SDL_ttf/build
        key: windows-msvc-sdl3-${{ hashFiles('external/SDL/**', 'external/SDL_image/**', 'external/SDL_ttf/**') }}
        restore-keys: |
          windows-msvc-sdl3-

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.3

    - name: Configure CMake
      run: |
        cmake -B build `
          -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DLAYA_BUILD_TESTS=ON `
          -DLAYA_BUILD_EXAMPLES=ON `
          -DLAYA_SDL_METHOD=submodule `
          -DLAYA_BUILD_SHARED=ON

    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel

    - name: Test
      working-directory: build
      run: |
        ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel

    - name: Run examples
      working-directory: build
      run: |
        # Test that examples can be executed (they should exit quickly)
        Start-Process -FilePath ".\examples\${{ matrix.build_type }}\hello_laya.exe" -Wait -Timeout 10 -ErrorAction SilentlyContinue

    - name: Upload build artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: laya-windows-msvc-${{ matrix.build_type }}
        path: |
          build/src/
          build/examples/
          !build/**/*.obj
          !build/**/*.pdb
        retention-days: 7

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tidy-14 cppcheck

    - name: Run clang-tidy
      run: |
        # Create compile_commands.json
        cmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DLAYA_SDL_METHOD=submodule -DLAYA_BUILD_SHARED=ON

        # Run clang-tidy on source files
        find src include -name "*.cpp" -o -name "*.hpp" | \
        xargs clang-tidy-14 -p build --config-file=.clang-tidy || true

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          --suppress=unusedFunction \
          src/ include/ 2> cppcheck-report.xml || true

    - name: Upload static analysis results
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-results
        path: |
          cppcheck-report.xml
        retention-days: 7
