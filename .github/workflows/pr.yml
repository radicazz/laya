name: Pull Request Validation

on:
  pull_request:
    branches: [ master, develop ]

jobs:
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Cache SDL3 build
      uses: actions/cache@v4
      with:
        path: |
          build/external
          external/SDL/build
        key: ${{ runner.os }}-gcc-sdl3-${{ hashFiles('external/SDL/**') }}
        restore-keys: |
          ${{ runner.os }}-gcc-sdl3-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          gcc-11 \
          g++-11 \
          clang-format-14 \
          clang-tidy-14

    - name: Check code formatting
      run: |
        # Check if code is properly formatted
        find src include tests examples -name "*.cpp" -o -name "*.hpp" | \
        xargs clang-format-14 --dry-run --Werror

    - name: Configure CMake (Debug)
      run: |
        CC=gcc-11 CXX=g++-11 cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DLAYA_BUILD_TESTS=ON \
          -DLAYA_BUILD_EXAMPLES=ON \
          -DLAYA_SDL_METHOD=submodule \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Build
      run: cmake --build build --parallel

    - name: Run tests
      working-directory: build
      run: ctest --output-on-failure --parallel

    - name: Quick static analysis
      run: |
        # Run clang-tidy on changed files only
        if [ -n "${{ github.event.pull_request.base.sha }}" ]; then
          # Get list of changed C++ files
          git diff --name-only ${{ github.event.pull_request.base.sha }} HEAD | \
          grep -E '\.(cpp|hpp)$' | \
          head -10 | \
          xargs -r clang-tidy-14 -p build --config-file=.clang-tidy || true
        fi

  build-matrix:
    name: Cross-platform Build Check
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug]
        include:
          - os: ubuntu-latest
            compiler: gcc-11
          - os: windows-latest
            compiler: msvc
          - os: macos-latest
            compiler: clang

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Cache SDL3 build
      uses: actions/cache@v4
      with:
        path: |
          build/external
          external/SDL/build
        key: ${{ runner.os }}-${{ matrix.compiler }}-sdl3-${{ hashFiles('external/SDL/**') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler }}-sdl3-

    - name: Install Ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          gcc-11 \
          g++-11 \
          libasound2-dev \
          libpulse-dev \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxfixes-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libegl1-mesa-dev

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja pkg-config

    - name: Setup MSVC
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.3

    - name: Configure CMake
      shell: bash
      run: |
        cmake_args=(
          -B build
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DLAYA_BUILD_TESTS=ON
          -DLAYA_BUILD_EXAMPLES=ON
          -DLAYA_SDL_METHOD=submodule
        )

        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          cmake_args+=(-G "Ninja" -DCMAKE_C_COMPILER=gcc-11 -DCMAKE_CXX_COMPILER=g++-11)
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cmake_args+=(-G "Visual Studio 17 2022" -A x64)
        else
          cmake_args+=(-G "Ninja")
        fi

        cmake "${cmake_args[@]}"

    - name: Build
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cmake --build build --config ${{ matrix.build_type }} --parallel
        else
          cmake --build build --parallel
        fi

    - name: Test
      shell: bash
      working-directory: build
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ctest --build-config ${{ matrix.build_type }} --output-on-failure
        else
          ctest --output-on-failure
        fi
